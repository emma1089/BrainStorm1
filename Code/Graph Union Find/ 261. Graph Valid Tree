Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.


int[] arr;
public boolean validTree(int n, int[][] edges) {
	arr = new int[n];
	for(int[] edge : edges) {
		if(!isConnected(edge[0], edge[1])) {
			union(edge[0], edge[1]);
		} else {
			return false;
		}
	}
	return true;
}
private void union(int a, int b) {
	int rootA = getRoot(a);
	int rootB = getRoot(b);
	arr[rootB] = rootA;
}
private boolean isConnected(int a, int b) {
	return getRoot(a) == getRoot(b);
}
private int getRoot(int num) {
	while(arr[num] != num) {
		num = arr[num];
	}
	return num;
}
