Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
connect all the 'O' nodes on the boundry to a dummy node
connect each 'O' node to its neighbour 'O' nodes, then we can tell directly whether a 'O' node is captured by checking whether it is connected to the dummy node.

int[] arr;
public void solve(char[][] board) {
	if(board.length == 0) return;
	arr = new int[board.length * board[0].length + 1];
	for(int i = 0; i < board.length; i++) {
		for(int j = 0; j < board[0].length; j++) {
			if(i == 0 || i == board.length - 1 || j == 0 || j == board[0].length - 1 && board[i][j] == 'O') {// If 'O' on the board, connect it to the dummy node.
					union(i * board[0].length + j, board.length * board[0].length);
			} else if(board[i][j] == 'O') {

			}

		}
	}
}
private boolean isConnected(int A, int B) {
	int rootA = getRoot(A);
	int rootB = getRoot(B);
	return rootA == rootB;
}
private void union(int A, int B) {
	int rootA = getRoot(A);
	int rootB = getRoot(B);
	arr[rootB] = rootA;
}
private int getRoot(int num) {
	while(arr[num] != num) {
		num = arr[num];
	}
	return num;
}
