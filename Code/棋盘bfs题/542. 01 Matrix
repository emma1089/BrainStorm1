Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.
Example 1:
Input:

0 0 0
0 1 0
0 0 0
Output:
0 0 0
0 1 0
0 0 0
Example 2:
Input:

0 0 0
0 1 0
1 1 1
Output:
0 0 0
0 1 0
1 2 1
Note:
The number of elements of the given matrix will not exceed 10,000.
There are at least one 0 in the given matrix.
The cells are adjacent in only four directions: up, down, left and right.

public int[][] updateMatrix(int[][] matrix) {
	if(matrix.length == 0) return matrix;
	int[] dirX = new int[0, 0, 1, -1];
	int[] dirY = new int[1, -1, 0, 0];
	Queue<Integer> queue = new LinkedList<>();
	for(int i = 0; i < matrix.length; i++) {
		for(int j = 0; j < matrix[0].length; j++) {
			if(matrix[i][j] == 0) {
				queue.offer(i * matrix[0].length + j);
			} else {
				matrix[i][j] = -1;
			}
		}
	}
	while(!queue.isEmpty()) {
		int size = queue.size();
		for(int i = 0; i < size; i++) {
			int cur = queue.poll();
			int curX = cur / matrix[0].length;
			int curY = cur % matrix[0].length;
			for(int k = 0; k < 4; k++) {
				int newX = curX + dirX[k], newY = curY + dirY[k];
				if(newX < 0 || newX >= matrix.length || newY < 0 || newY >= matrix[0].length || matrix[newX][newY] != -1) continue;
				matrix[newX][newY] = matrix[curX][curY] + 1;
			}
		}
	}
	return matrix;
}
